1
00:00:00.000 --> 00:00:01.300
Greetings and welcome to

2
00:00:01.300 --> 00:00:02.360
Kizano's FinTech channel,

3
00:00:02.640 --> 00:00:03.900
where I take you from zero to

4
00:00:03.900 --> 00:00:05.520
master in IT and DevOps.

5
00:00:05.980 --> 00:00:07.300
In today's video, we're going to be

6
00:00:07.300 --> 00:00:09.040
talking about the Git process.

7
00:00:09.880 --> 00:00:11.960
In previous videos on other platforms,

8
00:00:12.160 --> 00:00:13.940
we've talked about Git in a little

9
00:00:13.940 --> 00:00:14.640
bit of detail,

10
00:00:14.960 --> 00:00:16.200
such that I can give you the

11
00:00:16.200 --> 00:00:17.200
terms and terminology,

12
00:00:17.460 --> 00:00:20.440
how it works, going over the fundamentals

13
00:00:20.440 --> 00:00:21.020
of Git,

14
00:00:21.120 --> 00:00:23.080
but not really talking about the process

15
00:00:23.080 --> 00:00:25.200
by which this can get completed.

16
00:00:25.940 --> 00:00:27.580
This video is going to be a

17
00:00:27.580 --> 00:00:28.340
deep dive,

18
00:00:28.340 --> 00:00:30.700
where we actually step into some scenarios

19
00:00:30.700 --> 00:00:32.920
so that this makes better sense,

20
00:00:33.420 --> 00:00:35.240
and you get a better understanding

21
00:00:35.240 --> 00:00:36.000
of how

22
00:00:36.000 --> 00:00:38.280
software engineering works from a

23
00:00:38.280 --> 00:00:39.780
process perspective.

24
00:00:40.260 --> 00:00:41.600
By the end of this video,

25
00:00:41.760 --> 00:00:43.220
you should be able to step through

26
00:00:43.220 --> 00:00:44.160
your first commit,

27
00:00:44.620 --> 00:00:46.260
being able to understand how to merge

28
00:00:46.260 --> 00:00:47.500
your files into the branches.

29
00:00:48.000 --> 00:00:49.200
You should be able to understand the

30
00:00:49.200 --> 00:00:50.860
fundamentals of a pull request,

31
00:00:51.140 --> 00:00:52.140
why that should happen,

32
00:00:52.380 --> 00:00:53.800
when you should open those up,

33
00:00:53.980 --> 00:00:55.680
what should happen within the discourse

34
00:00:55.680 --> 00:00:56.740
of the pull request,

35
00:00:56.740 --> 00:00:58.780
and how to merge your changes back in.

36
00:00:58.960 --> 00:01:00.440
What is the meaning of a release

37
00:01:00.440 --> 00:01:02.640
and how we're going to accomplish that,

38
00:01:03.040 --> 00:01:05.600
and tagging your branches such that

39
00:01:05.600 --> 00:01:08.400
you can come back to those specific versions,

40
00:01:08.600 --> 00:01:11.080
as they are related to the releases

41
00:01:11.080 --> 00:01:13.440
that are associated with the code

42
00:01:13.440 --> 00:01:14.500
that you're pushing out.

43
00:01:15.000 --> 00:01:16.420
Also, as a bonus,

44
00:01:16.640 --> 00:01:18.580
we're going to cover a merge conflict.

45
00:01:20.440 --> 00:01:22.380
This is a video you're not going

46
00:01:22.380 --> 00:01:22.860
to want to miss.

47
00:01:30.300 --> 00:01:32.300
Hi, my name is Markizano Draconus,

48
00:01:32.560 --> 00:01:34.900
and welcome to Kizano's FinTech channel,

49
00:01:35.060 --> 00:01:36.440
where I take you from zero to

50
00:01:36.440 --> 00:01:37.940
master in IT and DevOps.

51
00:01:39.200 --> 00:01:41.040
So we'll first kick things off with

52
00:01:41.040 --> 00:01:43.220
the master branch or the main branch,

53
00:01:43.380 --> 00:01:44.260
whatever you want to call it,

54
00:01:44.360 --> 00:01:46.420
which is the main copy of the

55
00:01:46.420 --> 00:01:47.100
development line

56
00:01:47.100 --> 00:01:49.200
that represents the code that recently

57
00:01:49.200 --> 00:01:50.080
went to production.

58
00:01:51.360 --> 00:01:52.840
We're going to create a branch*

59
00:01:52.840 --> 00:01:54.400
off the master branch,

60
00:01:54.520 --> 00:01:56.600
and we're going to create the staging branch.

61
00:01:57.080 --> 00:01:58.980
Now, a little more elaboration on

62
00:01:58.980 --> 00:02:00.040
what's going on here.

63
00:02:00.480 --> 00:02:02.100
The master branch, as I'm going to

64
00:02:02.100 --> 00:02:02.920
call it for this video,

65
00:02:03.060 --> 00:02:04.360
is going to be the main line

66
00:02:04.360 --> 00:02:05.040
of development,

67
00:02:05.340 --> 00:02:08.280
meaning this is the closest copy to

68
00:02:08.280 --> 00:02:09.900
production that we have.

69
00:02:10.300 --> 00:02:12.300
Production is going to be the live copy,

70
00:02:12.400 --> 00:02:13.980
the live version of your website,

71
00:02:14.200 --> 00:02:16.320
that is the thing that's out there

72
00:02:16.320 --> 00:02:17.080
making you money.

73
00:02:18.560 --> 00:02:21.240
The staging branch is going to be

74
00:02:21.240 --> 00:02:21.860
the place

75
00:02:21.860 --> 00:02:24.420
where you present a copy of production

76
00:02:24.420 --> 00:02:25.920
that's not quite production,

77
00:02:26.080 --> 00:02:28.500
that allows us to do some testing and

78
00:02:28.500 --> 00:02:30.880
assert that any changes that we make

79
00:02:30.880 --> 00:02:33.100
to the website are the changes that

80
00:02:33.100 --> 00:02:33.820
we expect.

81
00:02:34.360 --> 00:02:35.640
We get to see what the result

82
00:02:35.640 --> 00:02:36.880
of those changes are,

83
00:02:37.020 --> 00:02:38.900
and we also get to operate in

84
00:02:38.900 --> 00:02:42.020
some test bed environment to better

85
00:02:42.020 --> 00:02:43.120
understand and know,

86
00:02:43.360 --> 00:02:44.760
are we going to break the site?

87
00:02:45.060 --> 00:02:46.140
Is it going to take it down?

88
00:02:46.140 --> 00:02:48.320
Is it going to enhance it just

89
00:02:48.320 --> 00:02:49.120
the way we want it to,

90
00:02:49.200 --> 00:02:50.300
or maybe we wanted to put that

91
00:02:50.300 --> 00:02:51.820
picture two pixels to the right instead?

92
00:02:52.680 --> 00:02:53.900
This is the place where you can

93
00:02:53.900 --> 00:02:54.260
do that,

94
00:02:54.520 --> 00:02:55.700
and this is the branch where the

95
00:02:55.700 --> 00:02:57.880
majority of those changes go as we

96
00:02:57.880 --> 00:03:00.700
stage things for a release.

97
00:03:01.180 --> 00:03:03.840
Now, we're going to branch from the

98
00:03:03.840 --> 00:03:06.600
staging branch down to the development branch.

99
00:03:07.280 --> 00:03:10.520
Now, the development branch is the

100
00:03:10.520 --> 00:03:11.720
place where most of

101
00:03:11.720 --> 00:03:13.120
the development team is going to be

102
00:03:13.120 --> 00:03:14.500
contributing their changes.

103
00:03:14.500 --> 00:03:16.060
If you have a team of two

104
00:03:16.060 --> 00:03:16.560
or three,

105
00:03:16.820 --> 00:03:18.140
you can get away with contributing

106
00:03:18.140 --> 00:03:19.700
to the development branch directly.

107
00:03:20.300 --> 00:03:22.180
For teams that are much larger,

108
00:03:22.360 --> 00:03:23.680
need to be more dispersed,

109
00:03:23.920 --> 00:03:25.660
need to be more decentralized,

110
00:03:26.400 --> 00:03:28.960
can elect to create additional branches

111
00:03:28.960 --> 00:03:31.480
below the development branch

112
00:03:31.480 --> 00:03:33.560
that can be the sources of truth

113
00:03:33.560 --> 00:03:35.100
where they go to get their changes

114
00:03:35.100 --> 00:03:37.420
prior to promoting those branches

115
00:03:37.420 --> 00:03:39.600
to any particular higher region, so

116
00:03:39.600 --> 00:03:39.980
to speak.

117
00:03:40.580 --> 00:03:43.420
If you notice, this pattern of creating

118
00:03:43.420 --> 00:03:45.200
a branch off of the changes

119
00:03:45.200 --> 00:03:46.940
is going to be a recurring pattern,

120
00:03:47.400 --> 00:03:49.920
a recurring shape that is designed

121
00:03:49.920 --> 00:03:52.660
in this giant mosaic that represents

122
00:03:52.660 --> 00:03:54.480
the Git process.

123
00:03:55.940 --> 00:03:57.480
Stay with me now as we continue

124
00:03:57.480 --> 00:03:59.920
to look another pane of glass deeper

125
00:03:59.920 --> 00:04:01.060
into the Kaleidoscope.

126
00:04:02.200 --> 00:04:04.880
Now, before embarking on a project,

127
00:04:05.100 --> 00:04:06.380
let's say you've gone through the

128
00:04:06.380 --> 00:04:07.140
initial steps,

129
00:04:07.280 --> 00:04:08.920
you now have all the business logic

130
00:04:08.920 --> 00:04:09.640
in front of you,

131
00:04:09.640 --> 00:04:11.540
you just need to convert that into

132
00:04:11.540 --> 00:04:12.440
computer code,

133
00:04:13.100 --> 00:04:14.660
and we're about to begin on the

134
00:04:14.660 --> 00:04:16.620
execution phase of our project.

135
00:04:17.460 --> 00:04:19.260
While in the execution phase,

136
00:04:19.440 --> 00:04:21.240
you're going to take out a branch

137
00:04:21.240 --> 00:04:23.400
on the development branch.

138
00:04:23.900 --> 00:04:24.260
Why?

139
00:04:24.640 --> 00:04:26.480
Because at this point, we're about

140
00:04:26.480 --> 00:04:28.800
to make some changes to the code

141
00:04:29.300 --> 00:04:31.720
in our own environment, so to speak,

142
00:04:31.860 --> 00:04:33.400
so that other people can do the

143
00:04:33.400 --> 00:04:33.940
same thing.

144
00:04:34.120 --> 00:04:36.900
If everyone pulls from the development branch

145
00:04:36.900 --> 00:04:39.680
and makes their changes from the development

146
00:04:39.680 --> 00:04:41.520
branch on their local branch,

147
00:04:42.040 --> 00:04:43.960
they can make changes in an isolated

148
00:04:43.960 --> 00:04:45.460
environment, more or less,

149
00:04:45.920 --> 00:04:47.860
from a development perspective and

150
00:04:47.860 --> 00:04:49.560
being able to write the files to disk

151
00:04:49.560 --> 00:04:51.320
and distribute those changes among

152
00:04:51.320 --> 00:04:52.180
the other teams

153
00:04:52.180 --> 00:04:53.800
so that other people can see a

154
00:04:53.800 --> 00:04:55.120
copy of what it is they wrote.

155
00:04:55.540 --> 00:04:57.560
And also for auditing purposes, you

156
00:04:57.560 --> 00:05:01.460
can CYA (cover your arse) with this for every commit.

157
00:05:01.660 --> 00:05:04.000
There's a hash that represents the

158
00:05:04.000 --> 00:05:05.700
time at which you made the change.

159
00:05:05.700 --> 00:05:07.980
How many files were made in that change?

160
00:05:08.540 --> 00:05:10.020
And you can even write your own

161
00:05:10.020 --> 00:05:10.880
signature saying,

162
00:05:11.140 --> 00:05:12.200
I made those changes.

163
00:05:12.420 --> 00:05:13.880
And it's almost like, you know,

164
00:05:13.940 --> 00:05:15.440
you writing your own transaction to

165
00:05:15.440 --> 00:05:16.460
a blockchain of sorts,

166
00:05:16.500 --> 00:05:17.260
(if you're in cryptocurrency).

167
00:05:18.940 --> 00:05:22.260
Git allows you to branch from other changes,

168
00:05:22.640 --> 00:05:24.180
make your changes to that branch,

169
00:05:24.540 --> 00:05:26.120
and then later we can merge those

170
00:05:26.120 --> 00:05:27.040
changes back in.

171
00:05:27.320 --> 00:05:29.040
And it allows us to do this

172
00:05:29.040 --> 00:05:30.340
in a decentralized way

173
00:05:30.340 --> 00:05:32.020
so that we're not all making changes

174
00:05:32.020 --> 00:05:33.280
to the same exact files,

175
00:05:33.440 --> 00:05:35.480
to the same exact directory tree.

176
00:05:35.700 --> 00:05:37.700
For me, it's kind of like the

177
00:05:37.700 --> 00:05:38.460
undo button.

178
00:05:39.020 --> 00:05:42.180
I commit every change and I annotate

179
00:05:42.180 --> 00:05:43.420
just about everything I do.

180
00:05:44.000 --> 00:05:45.380
It's typically one or two changes

181
00:05:45.380 --> 00:05:45.920
per file,

182
00:05:46.420 --> 00:05:48.100
maybe a collection of changes across

183
00:05:48.100 --> 00:05:48.940
a couple of files.

184
00:05:49.220 --> 00:05:51.220
And I attach a message associated

185
00:05:51.220 --> 00:05:52.200
with those changes

186
00:05:52.200 --> 00:05:54.340
describing the why and the rationale

187
00:05:54.340 --> 00:05:56.740
behind the change that I was making.

188
00:05:57.100 --> 00:05:58.960
So in the git commit, and it

189
00:05:58.960 --> 00:05:59.980
asks you the message,

190
00:06:00.080 --> 00:06:01.680
and it says, what's the message you

191
00:06:01.680 --> 00:06:02.160
want to make?

192
00:06:02.540 --> 00:06:04.960
I'll summarize in a sentence or two

193
00:06:04.960 --> 00:06:08.680
describing what the changes were and

194
00:06:08.680 --> 00:06:10.180
why I was making those changes.

195
00:06:10.700 --> 00:06:12.400
In this way, when somebody goes back

196
00:06:12.400 --> 00:06:13.380
and they look at the history,

197
00:06:13.840 --> 00:06:16.600
they can see and understand the thought process

198
00:06:16.600 --> 00:06:18.020
that was going on in my mind

199
00:06:18.020 --> 00:06:19.680
as I was making the changes to

200
00:06:19.680 --> 00:06:21.320
the code and the reason why.

201
00:06:21.620 --> 00:06:23.380
I may also include the ticket ID.

202
00:06:23.840 --> 00:06:25.300
I may also include any other kind

203
00:06:25.300 --> 00:06:26.860
of reference information to say,

204
00:06:27.240 --> 00:06:29.120
well, if I make this change to

205
00:06:29.120 --> 00:06:29.680
the code,

206
00:06:30.100 --> 00:06:31.820
this is the reason why I'm making

207
00:06:31.820 --> 00:06:32.920
the change to the code.

208
00:06:33.480 --> 00:06:35.380
And it better articulates that so

209
00:06:35.380 --> 00:06:38.500
that you can share that with other people

210
00:06:38.500 --> 00:06:39.720
and they can look upon that and

211
00:06:39.720 --> 00:06:40.140
see it

212
00:06:40.140 --> 00:06:42.500
and not have to interrogate you for it.

213
00:06:42.700 --> 00:06:43.960
Or at least that's the idea.

214
00:06:44.460 --> 00:06:46.180
Now, say the changes are complete

215
00:06:46.180 --> 00:06:48.580
and you're ready to merge your changes

216
00:06:48.580 --> 00:06:49.080
back up.

217
00:06:49.440 --> 00:06:50.980
What's going to happen is we're going

218
00:06:50.980 --> 00:06:53.140
to open a pull request at this point.

219
00:06:53.560 --> 00:06:55.880
And we're going to say, hey, I

220
00:06:55.880 --> 00:06:57.260
have changes that I've made in my

221
00:06:57.260 --> 00:06:57.980
feature branch.

222
00:06:58.120 --> 00:06:59.440
I am now ready to take those

223
00:06:59.440 --> 00:07:01.060
changes and merge them back into the

224
00:07:01.060 --> 00:07:01.480
code base.

225
00:07:01.480 --> 00:07:04.180
And by opening a pull request, you're

226
00:07:04.180 --> 00:07:06.700
inviting another developer

227
00:07:06.700 --> 00:07:08.500
to come and observe the changes that

228
00:07:08.500 --> 00:07:08.980
you've made.

229
00:07:10.700 --> 00:07:13.980
Do they honor the coding standards

230
00:07:13.980 --> 00:07:15.000
that we have put forth?

231
00:07:15.360 --> 00:07:16.140
Do you have enough spaces?

232
00:07:16.420 --> 00:07:17.560
Are the braces on the same line?

233
00:07:17.680 --> 00:07:18.860
Do you match the same formatting?

234
00:07:19.140 --> 00:07:20.440
Not only that, did you place the

235
00:07:20.440 --> 00:07:22.120
files in the right location?

236
00:07:22.760 --> 00:07:25.320
Are the files conformant to the designs

237
00:07:25.320 --> 00:07:26.200
of the framework?

238
00:07:28.680 --> 00:07:30.900
Do the changes honor and adhere what

239
00:07:30.900 --> 00:07:31.140
it is

240
00:07:31.140 --> 00:07:31.800
we're looking for?

241
00:07:31.960 --> 00:07:34.180
But aside from the politics of the code,

242
00:07:34.540 --> 00:07:35.940
there's also the functionality of

243
00:07:35.940 --> 00:07:36.240
the code.

244
00:07:36.340 --> 00:07:38.620
Did it make the actual intended changes?

245
00:07:39.180 --> 00:07:41.220
Do you have the associated unit tests

246
00:07:41.220 --> 00:07:42.440
along with the code

247
00:07:42.440 --> 00:07:44.700
to assert that what you changed and

248
00:07:44.700 --> 00:07:45.440
what you altered

249
00:07:45.440 --> 00:07:47.060
is going to end up with the

250
00:07:47.060 --> 00:07:48.480
results that you expected?

251
00:07:49.060 --> 00:07:50.620
The tests can also be used as

252
00:07:50.620 --> 00:07:51.880
a sign off and a check off

253
00:07:51.880 --> 00:07:52.240
to say,

254
00:07:52.380 --> 00:07:54.320
yes, I have asserted that this code

255
00:07:54.320 --> 00:07:55.620
is doing what it's supposed to do.

256
00:07:55.940 --> 00:07:57.500
But also could be used as an

257
00:07:57.500 --> 00:07:59.640
example of how this code is supposed

258
00:07:59.640 --> 00:08:00.340
to be used.

259
00:08:01.080 --> 00:08:02.820
Once you've made all your changes

260
00:08:02.820 --> 00:08:04.620
and you've submitted them for a pull request,

261
00:08:04.920 --> 00:08:07.180
somebody else comes in and basically asserts

262
00:08:07.180 --> 00:08:09.100
that those changes were made correctly.

263
00:08:09.640 --> 00:08:11.420
And if not, they can offer some

264
00:08:11.420 --> 00:08:12.660
feedback for you

265
00:08:12.660 --> 00:08:16.400
to proceed with making changes to

266
00:08:16.400 --> 00:08:17.060
honor them

267
00:08:17.060 --> 00:08:20.260
before they get merged back into the

268
00:08:20.260 --> 00:08:21.160
development branch.

269
00:08:21.680 --> 00:08:23.320
Once the changes have been merged

270
00:08:23.320 --> 00:08:24.920
into the development branch,

271
00:08:25.320 --> 00:08:26.800
that's time for the next parts of

272
00:08:26.800 --> 00:08:28.140
the phases to kick off.

273
00:08:28.140 --> 00:08:30.300
So now that you've made your changes

274
00:08:30.300 --> 00:08:31.600
in your feature branch,

275
00:08:31.740 --> 00:08:33.580
you've successfully gone through your

276
00:08:33.580 --> 00:08:34.780
pull request.

277
00:08:35.140 --> 00:08:36.740
Your changes have been successfully

278
00:08:36.740 --> 00:08:37.900
accepted by the team.

279
00:08:38.080 --> 00:08:39.940
And now you're ready to take your changes

280
00:08:39.940 --> 00:08:41.960
and merge them into the staging branch.

281
00:08:42.480 --> 00:08:43.860
The team has already signed off on,

282
00:08:44.120 --> 00:08:45.140
let's also assume,

283
00:08:45.780 --> 00:08:46.900
(just kind of sort of going along

284
00:08:46.900 --> 00:08:47.780
the happy path here.)

285
00:08:48.100 --> 00:08:50.440
Let's assume that your changes were successful.

286
00:08:50.700 --> 00:08:52.260
You went through testing, your testing

287
00:08:52.260 --> 00:08:53.060
was successful.

288
00:08:53.580 --> 00:08:55.400
And the team was also happy and

289
00:08:55.400 --> 00:08:56.400
excited for your changes.

290
00:08:56.400 --> 00:08:57.500
And we can't wait to get them

291
00:08:57.500 --> 00:08:58.080
into production.

292
00:08:58.740 --> 00:09:00.060
The next phase is to pass this

293
00:09:00.060 --> 00:09:01.080
over to the customer

294
00:09:01.080 --> 00:09:03.240
and say, hey, we are done with

295
00:09:03.240 --> 00:09:03.700
the changes.

296
00:09:03.880 --> 00:09:04.880
We've offered the feature.

297
00:09:05.020 --> 00:09:06.160
We've inserted your widget.

298
00:09:07.080 --> 00:09:08.640
Are you happy with those changes?

299
00:09:08.800 --> 00:09:09.880
Would you like anything else?

300
00:09:10.000 --> 00:09:12.100
Would you want anything more from this?

301
00:09:14.980 --> 00:09:16.620
And so the development branch

302
00:09:16.620 --> 00:09:19.400
now opens a pull request up to

303
00:09:19.400 --> 00:09:20.480
the staging branch

304
00:09:20.480 --> 00:09:22.320
as we pass the code along to

305
00:09:22.320 --> 00:09:22.860
the customer

306
00:09:22.860 --> 00:09:24.360
or not the code, but the results

307
00:09:24.360 --> 00:09:24.800
of the code.

308
00:09:24.800 --> 00:09:27.020
And we say, did we get this right?

309
00:09:27.380 --> 00:09:28.960
Let's also assume the customer is

310
00:09:28.960 --> 00:09:29.760
perfectly happy,

311
00:09:29.920 --> 00:09:31.520
doesn't require any other changes,

312
00:09:31.980 --> 00:09:33.440
doesn't ask for you to go ahead

313
00:09:33.440 --> 00:09:34.820
and move it back to other pixels

314
00:09:34.820 --> 00:09:36.880
because he changed his mind last minute.

315
00:09:37.240 --> 00:09:39.180
And let's just assume that none of

316
00:09:39.180 --> 00:09:39.600
those things

317
00:09:39.600 --> 00:09:41.540
ever happened in a perfect world.

318
00:09:41.880 --> 00:09:43.400
And you're able to take your changes

319
00:09:43.400 --> 00:09:44.700
from the staging branch

320
00:09:44.700 --> 00:09:46.720
and merge them up to the master branch

321
00:09:46.720 --> 00:09:49.080
because we're ready to publish to production.

322
00:09:49.600 --> 00:09:51.220
And so the next stage is to

323
00:09:51.220 --> 00:09:52.040
take staging

324
00:09:52.720 --> 00:09:54.280
and merge it into master.

325
00:09:54.800 --> 00:09:56.480
And by doing so, we open another

326
00:09:56.480 --> 00:09:57.060
pull request.

327
00:09:57.520 --> 00:09:58.840
Once we've taken our changes

328
00:09:58.840 --> 00:10:00.620
and merged them into the master branch,

329
00:10:00.860 --> 00:10:04.160
that is in effect from a developer's perspective,

330
00:10:04.880 --> 00:10:06.680
publishing the code to production.

331
00:10:07.340 --> 00:10:09.680
Now what this accomplishes is all

332
00:10:09.680 --> 00:10:10.240
of the changes

333
00:10:10.240 --> 00:10:11.900
and all of the work has now

334
00:10:11.900 --> 00:10:12.340
been moved

335
00:10:12.340 --> 00:10:13.920
into a place where we now know

336
00:10:13.920 --> 00:10:14.920
this is a copy

337
00:10:14.920 --> 00:10:17.440
of what was last published to production.

338
00:10:17.740 --> 00:10:20.080
As a result, what we do next,

339
00:10:20.920 --> 00:10:21.780
we tag.

340
00:10:22.440 --> 00:10:24.880
We now have release 1.0.

341
00:10:25.000 --> 00:10:25.560
Congratulations.

342
00:10:26.440 --> 00:10:28.620
This is the perfect happy path.

343
00:10:28.800 --> 00:10:29.680
We go from master.

344
00:10:29.920 --> 00:10:31.520
We break it down to staging.

345
00:10:31.920 --> 00:10:33.380
We break it down to development.

346
00:10:33.960 --> 00:10:35.320
And then we have a feature.

347
00:10:35.820 --> 00:10:37.280
We make our changes to the feature.

348
00:10:37.820 --> 00:10:39.760
We merge our feature back into the

349
00:10:39.760 --> 00:10:40.500
development branch.

350
00:10:40.840 --> 00:10:42.140
The development branch merges back

351
00:10:42.140 --> 00:10:43.220
into the staging branch.

352
00:10:43.420 --> 00:10:44.840
The staging branch merges back

353
00:10:44.840 --> 00:10:45.780
into the master branch.

354
00:10:45.960 --> 00:10:48.820
And we have our release as a result

355
00:10:48.820 --> 00:10:52.420
of this entire process that has guided us

356
00:10:52.420 --> 00:10:53.820
to where we stand today.

357
00:10:54.440 --> 00:10:56.840
Now, that's the happy path.

358
00:10:57.600 --> 00:10:59.240
That's assuming there's no problems.

359
00:10:59.480 --> 00:11:00.840
That's what they teach you in classrooms.

360
00:11:01.240 --> 00:11:02.560
That's what they want you to know

361
00:11:02.560 --> 00:11:03.120
on the blogs.

362
00:11:04.280 --> 00:11:05.500
What happens in reality?

363
00:11:09.420 --> 00:11:12.300
You know, your code doesn't work out here.

364
00:11:12.480 --> 00:11:13.400
You end up with bugs.

365
00:11:13.960 --> 00:11:15.840
The customer never accepts your changes.

366
00:11:16.020 --> 00:11:17.520
They always want last minute changes.

367
00:11:17.520 --> 00:11:19.500
The development team is never happy

368
00:11:19.500 --> 00:11:20.060
with your code.

369
00:11:20.140 --> 00:11:21.720
They always want you to refine your work.

370
00:11:22.520 --> 00:11:23.780
And when you get into production,

371
00:11:24.040 --> 00:11:24.880
there's going to be bugs.

372
00:11:25.180 --> 00:11:26.080
And they're going to want you to

373
00:11:26.080 --> 00:11:26.880
fix it hot spot.

374
00:11:27.300 --> 00:11:28.520
Hot on the spot.

375
00:11:28.900 --> 00:11:31.020
And, well, darling, that's where the

376
00:11:31.020 --> 00:11:31.900
overtime kicks in....

377
00:11:33.560 --> 00:11:34.260
Let's begin.

378
00:11:34.680 --> 00:11:35.740
We're going to break this down.

379
00:11:35.980 --> 00:11:37.260
Let's say you've got another ticket.

380
00:11:37.940 --> 00:11:39.500
Another feature has come in.

381
00:11:39.740 --> 00:11:41.880
And we need to get this feature

382
00:11:41.880 --> 00:11:43.280
in at the same time.

383
00:11:43.280 --> 00:11:47.560
Or we allow the features to run asynchronously

384
00:11:47.560 --> 00:11:48.900
and we'll deploy them to production

385
00:11:48.900 --> 00:11:50.300
as they become available.

386
00:11:50.960 --> 00:11:53.340
How do you manage yourself in a situation

387
00:11:53.340 --> 00:11:55.580
where you've got other people involved

388
00:11:55.580 --> 00:11:56.820
in the same project

389
00:11:57.440 --> 00:12:00.080
and they all need to contribute changes

390
00:12:00.080 --> 00:12:00.960
to the code as well?

391
00:12:01.720 --> 00:12:03.600
This is where things get really specific.

392
00:12:04.420 --> 00:12:06.680
If they're making changes outside

393
00:12:06.680 --> 00:12:09.480
of the files and modules

394
00:12:09.480 --> 00:12:12.000
that you're working on yourself, you're

395
00:12:12.000 --> 00:12:12.420
just fine.

396
00:12:12.980 --> 00:12:14.080
They can make their changes.

397
00:12:14.420 --> 00:12:15.560
They can publish them out.

398
00:12:15.980 --> 00:12:17.160
They can put them to their branches,

399
00:12:17.420 --> 00:12:18.240
merge them accordingly.

400
00:12:18.800 --> 00:12:20.680
And when you receive and pull down

401
00:12:20.680 --> 00:12:21.300
the changes,

402
00:12:21.660 --> 00:12:23.520
it'll be a clean pull because you're

403
00:12:23.520 --> 00:12:24.420
just pulling files

404
00:12:24.420 --> 00:12:27.060
in other directories, not your own.

405
00:12:27.800 --> 00:12:29.040
Say you're working on a feature.

406
00:12:29.560 --> 00:12:30.680
Feature two has come in.

407
00:12:30.820 --> 00:12:32.300
You're part of this team's project.

408
00:12:32.940 --> 00:12:35.220
Feature one ended up not taking that

409
00:12:35.220 --> 00:12:35.860
much time.

410
00:12:36.240 --> 00:12:37.040
It got completed.

411
00:12:38.040 --> 00:12:39.440
You're inside of feature two.

412
00:12:39.440 --> 00:12:42.080
You branched at about the same time

413
00:12:42.080 --> 00:12:42.520
they did.

414
00:12:42.620 --> 00:12:43.740
You have the same code.

415
00:12:44.200 --> 00:12:45.860
But what ends up happening is you

416
00:12:45.860 --> 00:12:46.900
make a couple of changes.

417
00:12:47.340 --> 00:12:48.280
Their feature got done.

418
00:12:48.800 --> 00:12:50.120
Now it's time to take on their

419
00:12:50.120 --> 00:12:51.300
changes and their code.

420
00:12:51.500 --> 00:12:53.860
You first enact this operation by

421
00:12:53.860 --> 00:12:54.880
doing a git pull

422
00:12:54.880 --> 00:12:57.220
and you see the develop branch got updated.

423
00:12:57.580 --> 00:12:58.960
So then you do a git merge

424
00:12:58.960 --> 00:13:00.760
from origin develop

425
00:13:01.360 --> 00:13:03.260
to pull those changes into your branch

426
00:13:03.260 --> 00:13:05.140
to make sure that you stay up

427
00:13:05.140 --> 00:13:07.260
to date with the latest changes

428
00:13:07.260 --> 00:13:09.620
so that by the time it comes

429
00:13:09.620 --> 00:13:11.020
for you to push your changes

430
00:13:11.020 --> 00:13:13.000
into the other branches, you won't

431
00:13:13.000 --> 00:13:14.300
have a bunch of conflicts.

432
00:13:14.880 --> 00:13:17.320
The idea as a developer is to

433
00:13:17.320 --> 00:13:19.160
resolve those conflicts over time.

434
00:13:19.640 --> 00:13:22.540
A lot of people as developers, I

435
00:13:22.540 --> 00:13:23.420
want to say get lazy,

436
00:13:23.580 --> 00:13:25.500
but I think they also suffer from attrition,

437
00:13:26.200 --> 00:13:29.100
is constantly staying up to date with changes,

438
00:13:29.240 --> 00:13:31.000
especially if they completely disrupt

439
00:13:31.000 --> 00:13:32.000
your entire workspace,

440
00:13:32.680 --> 00:13:34.020
can get challenging.

441
00:13:34.460 --> 00:13:35.480
I understand these.

442
00:13:35.480 --> 00:13:36.780
And I'm here to teach you how

443
00:13:36.780 --> 00:13:37.900
to navigate that.

444
00:13:38.520 --> 00:13:40.600
This is how you can maneuver this

445
00:13:40.600 --> 00:13:41.380
to get through it

446
00:13:41.380 --> 00:13:43.580
because that's the operations that

447
00:13:43.580 --> 00:13:44.500
need to happen in the brain.

448
00:13:44.960 --> 00:13:47.500
So those changes come in.

449
00:13:48.720 --> 00:13:50.680
You've been making your own changes.

450
00:13:50.840 --> 00:13:51.720
Now you need to merge.

451
00:13:52.220 --> 00:13:53.060
What happens?

452
00:13:53.420 --> 00:13:56.160
Well, if they make changes to other

453
00:13:56.160 --> 00:13:57.100
files, like I said,

454
00:13:57.500 --> 00:13:58.460
you get a clean merge.

455
00:13:58.540 --> 00:14:00.260
They just merge right in, done, cool,

456
00:14:00.460 --> 00:14:00.820
up to date.

457
00:14:01.120 --> 00:14:02.220
I don't need to do anything else.

458
00:14:02.560 --> 00:14:03.840
I may push back to the remote

459
00:14:03.840 --> 00:14:04.940
to make sure that, you know,

460
00:14:04.940 --> 00:14:06.540
everybody else is aware I pulled my

461
00:14:06.540 --> 00:14:07.460
changes in.

462
00:14:08.320 --> 00:14:09.660
But what happens after that?

463
00:14:11.120 --> 00:14:13.160
What happens if someone does make

464
00:14:13.160 --> 00:14:15.520
a change to a file you're working on?

465
00:14:15.940 --> 00:14:17.960
You now encounter what's called a

466
00:14:17.960 --> 00:14:18.980
merge conflict.

467
00:14:19.340 --> 00:14:21.820
But the idea of resolving a merge

468
00:14:21.820 --> 00:14:23.900
conflict is to think,

469
00:14:24.080 --> 00:14:26.200
what was the code intended to do

470
00:14:26.200 --> 00:14:28.160
as a result of the changes that

471
00:14:28.160 --> 00:14:28.660
were made?

472
00:14:29.260 --> 00:14:31.600
If somebody's incoming changes were

473
00:14:31.600 --> 00:14:34.980
intended to just rename a variable

474
00:14:34.980 --> 00:14:36.020
or if it was a little bit

475
00:14:36.020 --> 00:14:37.820
of white space, those changes are

476
00:14:37.820 --> 00:14:38.940
fairly easy to overcome.

477
00:14:39.720 --> 00:14:41.360
But if there are cases where an

478
00:14:41.360 --> 00:14:43.840
entire function contract has changed

479
00:14:43.840 --> 00:14:46.180
or the body of a function has changed,

480
00:14:46.660 --> 00:14:48.500
and it's in the same code that

481
00:14:48.500 --> 00:14:49.140
you're writing,

482
00:14:49.820 --> 00:14:51.700
you will then need to consider how

483
00:14:51.700 --> 00:14:53.100
those changes will impact

484
00:14:53.100 --> 00:14:56.000
and what the end result was that

485
00:14:56.000 --> 00:14:57.280
was the attempt at what needs to

486
00:14:57.280 --> 00:14:57.700
be done.

487
00:14:58.260 --> 00:15:00.420
And make sure that you resolve all

488
00:15:00.420 --> 00:15:02.900
of the changes inside of all the files.

489
00:15:03.160 --> 00:15:04.960
Do a diff afterwards to make sure

490
00:15:04.960 --> 00:15:06.000
that there's no trailing

491
00:15:08.220 --> 00:15:09.700
stuff that needs to be cleaned up

492
00:15:09.700 --> 00:15:11.060
as a result of the conflict.

493
00:15:11.060 --> 00:15:13.240
Because the conflicts themselves will

494
00:15:13.240 --> 00:15:14.260
be written to the files.

495
00:15:14.960 --> 00:15:16.460
And one of the things that gets

496
00:15:16.460 --> 00:15:17.760
really annoying with me and editors

497
00:15:17.760 --> 00:15:19.280
is they try to be too helpful.

498
00:15:19.460 --> 00:15:20.400
And there's all these colors.

499
00:15:20.820 --> 00:15:23.320
And it's so distracting.

500
00:15:23.820 --> 00:15:26.060
So the idea is if you come

501
00:15:26.060 --> 00:15:27.240
into a merge conflict,

502
00:15:28.380 --> 00:15:30.040
the idea is to come to a

503
00:15:30.040 --> 00:15:31.000
resolution of it.

504
00:15:31.100 --> 00:15:32.760
And the resolution to the merge conflict

505
00:15:32.760 --> 00:15:34.760
is what do you want the outcome

506
00:15:34.760 --> 00:15:35.320
to be?

507
00:15:35.640 --> 00:15:37.520
I stay focused on what the code

508
00:15:37.520 --> 00:15:38.600
is supposed to do.

509
00:15:39.080 --> 00:15:40.700
And I don't think too much about,

510
00:15:41.000 --> 00:15:42.040
well, what did this, you know,

511
00:15:42.100 --> 00:15:43.220
what was this incoming change?

512
00:15:43.260 --> 00:15:44.380
What was this incoming change?

513
00:15:44.540 --> 00:15:45.620
What was this perspective?

514
00:15:46.300 --> 00:15:48.100
It's helpful to understand those perspectives.

515
00:15:48.100 --> 00:15:49.160
But at the end of the day,

516
00:15:49.620 --> 00:15:50.380
the code is going to do what

517
00:15:50.380 --> 00:15:51.300
the code needs to do.

518
00:15:51.920 --> 00:15:54.620
So if changes need to be overwritten,

519
00:15:54.920 --> 00:15:55.540
that's fine.

520
00:15:56.160 --> 00:15:58.220
And sometimes bugs are a result of

521
00:15:58.220 --> 00:15:58.800
merge conflicts.

522
00:15:59.520 --> 00:16:01.160
It's a side effect of what happens.

523
00:16:01.760 --> 00:16:04.260
And as developers, that's what we're

524
00:16:04.260 --> 00:16:04.740
here to do.

525
00:16:05.500 --> 00:16:06.680
That's what we're here for.

526
00:16:07.420 --> 00:16:08.760
That's part of your job as a

527
00:16:08.760 --> 00:16:10.180
developer and why you make the six bugs.

528
00:16:10.800 --> 00:16:15.000
So once we merge our conflicts, then

529
00:16:15.000 --> 00:16:16.340
we can continue our changes.

530
00:16:16.920 --> 00:16:18.460
Same principles apply.

531
00:16:19.280 --> 00:16:21.040
Once you've made your changes to your

532
00:16:21.040 --> 00:16:21.700
feature branch,

533
00:16:22.020 --> 00:16:24.120
open a pull request to ask for

534
00:16:24.120 --> 00:16:25.480
those changes to be merged in.

535
00:16:26.180 --> 00:16:29.000
Oh, and speaking of bugs, I got

536
00:16:29.000 --> 00:16:29.980
a little tidbit for you.

537
00:16:30.600 --> 00:16:32.440
If a bug is detected in the

538
00:16:32.440 --> 00:16:35.100
develop branch before it gets promoted up,

539
00:16:35.840 --> 00:16:37.720
it can be easily corrected here in

540
00:16:37.720 --> 00:16:38.500
the develop branch.

541
00:16:38.760 --> 00:16:40.540
And the only thing it affects is

542
00:16:40.540 --> 00:16:41.660
the other feature branches.

543
00:16:41.660 --> 00:16:45.640
If a bug is detected in the

544
00:16:45.640 --> 00:16:47.660
staging branch, what ends up happening?

545
00:16:48.260 --> 00:16:50.180
The staging branch must now propagate

546
00:16:50.180 --> 00:16:51.480
its changes back down.

547
00:16:52.780 --> 00:16:53.600
That's not good.

548
00:16:54.140 --> 00:16:55.820
It's good that we found the bug

549
00:16:55.820 --> 00:16:58.720
in staging before it made it to production.

550
00:16:59.360 --> 00:17:00.600
And that's staging's purpose.

551
00:17:01.140 --> 00:17:02.820
But you want to try and reduce

552
00:17:02.820 --> 00:17:06.580
and minimize how much of non-merging

553
00:17:06.580 --> 00:17:08.100
commits get made to

554
00:17:08.100 --> 00:17:10.240
the staging branch, because you don't

555
00:17:10.240 --> 00:17:11.640
want too many hotfixes.

556
00:17:11.640 --> 00:17:13.920
To be made to staging, that makes

557
00:17:13.920 --> 00:17:14.980
it difficult for development,

558
00:17:15.100 --> 00:17:17.000
because now they have incoming changes

559
00:17:17.000 --> 00:17:19.860
that are not part of the development team.

560
00:17:20.600 --> 00:17:23.660
These changes are coming in from another

561
00:17:23.660 --> 00:17:25.900
source that shouldn't be from the

562
00:17:25.900 --> 00:17:26.740
proper process,

563
00:17:26.840 --> 00:17:28.600
and where the business analyst should

564
00:17:28.600 --> 00:17:29.820
be talking with the customer saying,

565
00:17:29.960 --> 00:17:31.120
hey, that's a feature, not a bug.

566
00:17:32.840 --> 00:17:34.220
Sorry, it's going to cost you a

567
00:17:34.220 --> 00:17:34.540
little bit more.

568
00:17:35.580 --> 00:17:37.440
If your bug is detected in production,

569
00:17:37.880 --> 00:17:38.720
that's really bad,

570
00:17:38.720 --> 00:17:40.760
because that means that bug now needs

571
00:17:40.760 --> 00:17:42.140
to be propagated back down.

572
00:17:42.220 --> 00:17:43.780
That bug fix needs to be propagated

573
00:17:43.780 --> 00:17:44.800
back down to staging,

574
00:17:45.300 --> 00:17:47.900
back down to development, and into

575
00:17:47.900 --> 00:17:48.960
all your feature branches.

576
00:17:50.280 --> 00:17:51.760
That's also not good, because then

577
00:17:51.760 --> 00:17:53.380
you also have to cut a new release

578
00:17:53.380 --> 00:17:56.300
and re-tag your code saying, we

579
00:17:56.300 --> 00:17:58.440
made a change to production, and it

580
00:17:58.440 --> 00:17:59.440
happened to be a quick fix.

581
00:17:59.940 --> 00:18:02.520
Now, as far as your release versioning

582
00:18:02.520 --> 00:18:03.100
is concerned,

583
00:18:03.840 --> 00:18:05.300
something else that doesn't get talked

584
00:18:05.300 --> 00:18:05.820
about enough.

585
00:18:06.700 --> 00:18:09.600
You have your major number, your minor

586
00:18:09.600 --> 00:18:12.580
number, your fixed number, and your

587
00:18:12.580 --> 00:18:13.300
build number.

588
00:18:13.860 --> 00:18:14.880
Build number is optional.

589
00:18:15.000 --> 00:18:16.200
Some people chop that off.

590
00:18:17.360 --> 00:18:20.140
The major number, if this increments,

591
00:18:20.640 --> 00:18:22.400
to me, that tells me you did

592
00:18:22.400 --> 00:18:24.040
a complete rewrite of your code.

593
00:18:24.580 --> 00:18:26.520
Whatever is going on in this version

594
00:18:26.520 --> 00:18:29.600
is completely incompatible with anything

595
00:18:29.600 --> 00:18:30.660
in the prior version.

596
00:18:31.100 --> 00:18:33.520
The minor version update says, this

597
00:18:33.520 --> 00:18:35.240
is a minimal update.

598
00:18:35.240 --> 00:18:36.540
It's a good update.

599
00:18:36.760 --> 00:18:38.800
It's a sustainable update, or has

600
00:18:38.800 --> 00:18:40.460
some substance in its update.

601
00:18:40.960 --> 00:18:43.620
But for the most part, is incompatible

602
00:18:43.620 --> 00:18:44.560
with previous versions.

603
00:18:44.560 --> 00:18:45.840
But there may be some parts of

604
00:18:45.840 --> 00:18:47.140
it that are still functional with

605
00:18:47.140 --> 00:18:47.760
this version.

606
00:18:48.600 --> 00:18:50.720
The fix and the build are just

607
00:18:50.720 --> 00:18:53.340
small, minor security patch updates.

608
00:18:53.740 --> 00:18:54.920
You definitely should update to the

609
00:18:54.920 --> 00:18:55.960
latest of these.

610
00:18:56.460 --> 00:18:58.340
But as far as the data is

611
00:18:58.340 --> 00:19:00.760
concerned, they should be completely compatible

612
00:19:00.760 --> 00:19:02.280
with previous versions of the site.

613
00:19:02.840 --> 00:19:04.900
So this is the Git process.

614
00:19:05.280 --> 00:19:07.180
For the most part, anytime you want

615
00:19:07.180 --> 00:19:08.620
to make a change to the repository,

616
00:19:09.300 --> 00:19:11.400
branch off of your main source of

617
00:19:11.400 --> 00:19:13.860
truth, make your changes to that branch,

618
00:19:14.120 --> 00:19:15.900
and send a pull request to merge

619
00:19:15.900 --> 00:19:17.640
those changes back into that branch,

620
00:19:17.960 --> 00:19:20.040
or into your target development branch,

621
00:19:20.140 --> 00:19:22.240
wherever it needs to be reviewed before

622
00:19:22.240 --> 00:19:24.140
being merged back into master.

623
00:19:24.460 --> 00:19:26.820
The idea behind this is to make

624
00:19:26.820 --> 00:19:28.220
sure that you have an opportunity

625
00:19:28.220 --> 00:19:29.340
to make your changes

626
00:19:29.340 --> 00:19:31.740
without the incoming changes outside

627
00:19:31.740 --> 00:19:32.560
of your control.

628
00:19:33.100 --> 00:19:34.300
You have the control to be able

629
00:19:34.300 --> 00:19:34.600
to say,

630
00:19:34.740 --> 00:19:36.040
I want to pull those changes in

631
00:19:36.040 --> 00:19:37.980
at my time, at my pace,

632
00:19:38.040 --> 00:19:40.780
when I'm ready to accept those changes.

633
00:19:40.980 --> 00:19:42.760
And I've made enough changes to my

634
00:19:42.760 --> 00:19:44.020
code that it's complete enough

635
00:19:44.020 --> 00:19:45.580
that I could accept those changes

636
00:19:45.580 --> 00:19:47.060
and deal with those resolutions.

637
00:19:47.420 --> 00:19:48.880
And I have the freedom and space

638
00:19:48.880 --> 00:19:49.920
in my brain to do that.

639
00:19:49.960 --> 00:19:51.420
Because when you're operating and

640
00:19:51.420 --> 00:19:52.360
working on your feature,

641
00:19:52.760 --> 00:19:54.660
oftentimes you have a tree of code

642
00:19:54.660 --> 00:19:55.240
in your head

643
00:19:55.240 --> 00:19:57.040
that can't fit the rest of this

644
00:19:57.040 --> 00:19:57.860
process in

645
00:19:57.860 --> 00:19:59.460
along with it while you're trying

646
00:19:59.460 --> 00:20:00.260
to work the code.

647
00:20:00.820 --> 00:20:02.740
And so it's better to distinguish

648
00:20:02.740 --> 00:20:04.460
when you're going to be putting your

649
00:20:04.460 --> 00:20:05.560
development hat on

650
00:20:05.560 --> 00:20:06.660
to write your code,

651
00:20:06.760 --> 00:20:08.560
focus on that tree of knowledge that

652
00:20:08.560 --> 00:20:10.540
you have in your mind to write

653
00:20:10.540 --> 00:20:11.100
your code,

654
00:20:11.320 --> 00:20:13.100
versus when you're done with your

655
00:20:13.100 --> 00:20:14.260
feature, you can put that off to

656
00:20:14.260 --> 00:20:14.660
the side.

657
00:20:15.080 --> 00:20:17.520
Your functions aren't full, expanded,

658
00:20:17.740 --> 00:20:19.140
all the lines of code in your head.

659
00:20:19.300 --> 00:20:20.760
You can now just refer to the

660
00:20:20.760 --> 00:20:22.040
header and know what it was supposed

661
00:20:22.040 --> 00:20:22.580
to do.

662
00:20:22.960 --> 00:20:24.760
And you can come back to the

663
00:20:24.760 --> 00:20:26.300
process aspect of this

664
00:20:26.300 --> 00:20:28.820
that will allow you to focus on

665
00:20:28.820 --> 00:20:30.200
how you get these changes in

666
00:20:30.200 --> 00:20:32.340
or how you accept other changes into

667
00:20:32.340 --> 00:20:32.860
your code.

668
00:20:33.840 --> 00:20:35.740
This is the process by which software

669
00:20:35.740 --> 00:20:36.460
gets complete.

670
00:20:37.060 --> 00:20:38.900
And I'm not saying it is the

671
00:20:38.900 --> 00:20:39.960
one end all be all.

672
00:20:40.480 --> 00:20:42.060
Neither am I saying is this process

673
00:20:42.060 --> 00:20:43.840
going to be the same for all

674
00:20:43.840 --> 00:20:44.400
of eternity.

675
00:20:44.940 --> 00:20:46.560
What I am saying is that this

676
00:20:46.560 --> 00:20:47.800
is an industry standard,

677
00:20:48.140 --> 00:20:51.960
well-identified, step-by-step how

678
00:20:51.960 --> 00:20:53.180
stuff gets complete

679
00:20:53.180 --> 00:20:55.360
that's applicable to both the corporate world

680
00:20:55.360 --> 00:20:57.380
and the open source world.

681
00:20:59.060 --> 00:21:01.140
My goal and objective with this is

682
00:21:01.140 --> 00:21:02.980
to make you as efficient as possible

683
00:21:02.980 --> 00:21:05.120
in whatever arena you decide to play,

684
00:21:05.360 --> 00:21:06.880
whether it be in the corporate environment

685
00:21:06.880 --> 00:21:08.160
or it could be in the open source.

686
00:21:09.200 --> 00:21:11.360
So that is the Git process from

687
00:21:11.360 --> 00:21:12.200
start to finish,

688
00:21:12.300 --> 00:21:13.940
where I step you through some more details

689
00:21:13.940 --> 00:21:15.060
and you get a better understanding

690
00:21:15.060 --> 00:21:15.880
of how things are done.

691
00:21:16.260 --> 00:21:17.600
I really hope this was helpful.

692
00:21:17.780 --> 00:21:19.180
I hope it was informative and educational

693
00:21:19.180 --> 00:21:19.660
for you.

694
00:21:19.940 --> 00:21:21.360
And I look forward to seeing you

695
00:21:21.360 --> 00:21:22.120
on the next video.

