1
00:00:01.080 --> 00:00:03.200
So, let's talk about Quality Assurance:

2
00:00:03.660 --> 00:00:04.460
Automated Testing.

3
00:00:05.480 --> 00:00:07.040
DEV: Wait, you mean I'm going to have

4
00:00:07.040 --> 00:00:09.060
to write code to test my code

5
00:00:09.060 --> 00:00:09.960
to make sure that the

6
00:00:09.960 --> 00:00:11.100
code I wrote is doing what it's

7
00:00:11.100 --> 00:00:11.640
supposed to be doing?

8
00:00:11.760 --> 00:00:13.000
Man, that's going to take double the

9
00:00:13.000 --> 00:00:14.680
time it takes me to execute on

10
00:00:14.680 --> 00:00:15.440
the project!

11
00:00:15.520 --> 00:00:16.000
Why are you going to make me

12
00:00:16.000 --> 00:00:16.500
do this, mang?!

13
00:00:17.200 --> 00:00:18.680
NARRATION: Yes, but you're going to want to

14
00:00:18.680 --> 00:00:21.020
include testing, unit and functional

15
00:00:21.020 --> 00:00:22.340
within your project because

16
00:00:22.720 --> 00:00:25.120
it can document what your code does

17
00:00:25.120 --> 00:00:27.120
so that others coming into the project

18
00:00:27.120 --> 00:00:27.560
can look at

19
00:00:27.560 --> 00:00:30.220
the tests and see how specific functions

20
00:00:30.220 --> 00:00:32.040
were implemented if you're providing APIs.

21
00:00:32.840 --> 00:00:34.640
How specific functions are to perform

22
00:00:34.640 --> 00:00:36.780
certain tasks if you are writing some

23
00:00:36.780 --> 00:00:37.580
kind of a pipeline.

24
00:00:37.860 --> 00:00:40.040
It can help people better understand

25
00:00:40.040 --> 00:00:42.380
what your code is all about if

26
00:00:42.380 --> 00:00:43.440
they have some tests

27
00:00:43.440 --> 00:00:44.780
that they can go through and look

28
00:00:44.780 --> 00:00:47.120
at and see what some mock inputs

29
00:00:47.120 --> 00:00:48.760
may look like and what

30
00:00:48.760 --> 00:00:50.640
some expected outputs could be.

31
00:00:51.360 --> 00:00:53.080
You ever fall into a situation where

32
00:00:53.080 --> 00:00:54.720
you got that one developer, that one

33
00:00:54.720 --> 00:00:55.460
server, that

34
00:00:55.460 --> 00:00:58.920
one process, that one thing that everybody

35
00:00:58.920 --> 00:01:00.780
uses, that everybody does, and when

36
00:01:00.780 --> 00:01:01.180
it goes

37
00:01:01.180 --> 00:01:03.340
down, it's a big fire, it's a

38
00:01:03.340 --> 00:01:05.360
big deal, it's a big blocker to

39
00:01:05.360 --> 00:01:06.640
people getting stuff done?

40
00:01:07.300 --> 00:01:09.680
Well, if you have proper testing in

41
00:01:09.680 --> 00:01:12.560
place, then it coerces you to have

42
00:01:12.560 --> 00:01:13.860
modular designs

43
00:01:13.860 --> 00:01:16.120
such that you'll be able to test

44
00:01:16.120 --> 00:01:18.580
a specific pipeline, a specific function,

45
00:01:18.860 --> 00:01:19.380
or a specific

46
00:01:19.380 --> 00:01:21.460
operation, do one thing and do it

47
00:01:21.460 --> 00:01:25.080
well inside your code, your project,

48
00:01:25.220 --> 00:01:25.980
whatever it is you're

49
00:01:25.980 --> 00:01:26.300
building.

50
00:01:27.080 --> 00:01:28.880
And 3rd: oh, you are going to

51
00:01:28.880 --> 00:01:30.840
love this one! You ever get those

52
00:01:30.840 --> 00:01:31.760
business requirements

53
00:01:31.760 --> 00:01:33.760
that don't quite make sense and somebody's

54
00:01:33.760 --> 00:01:35.400
like, yeah, can you just get that done?

55
00:01:35.660 --> 00:01:37.820
Well, if you have test cases in

56
00:01:37.820 --> 00:01:39.360
place, then it kind of sort of

57
00:01:39.360 --> 00:01:40.740
coerces people to make

58
00:01:40.740 --> 00:01:43.020
sure that they more clearly define

59
00:01:43.020 --> 00:01:46.320
their required outcomes or specific

60
00:01:46.320 --> 00:01:47.560
details that they need

61
00:01:47.560 --> 00:01:49.680
to be handled during the course of

62
00:01:49.680 --> 00:01:52.140
the project, not after it, while it

63
00:01:52.140 --> 00:01:53.200
needs to be reviewed.

64
00:01:54.500 --> 00:01:55.800
And fourth, it just kind of sort

65
00:01:55.800 --> 00:01:57.120
of ties into the third one, which

66
00:01:57.120 --> 00:01:57.940
ties into the second

67
00:01:57.940 --> 00:01:59.900
one, and that is, it makes sure

68
00:01:59.900 --> 00:02:01.620
that the test cases that you create,

69
00:02:02.160 --> 00:02:03.320
CYA, we want to cover

70
00:02:03.320 --> 00:02:04.840
and make sure you're good, okay?

71
00:02:05.180 --> 00:02:06.700
So that way, when somebody comes back

72
00:02:06.700 --> 00:02:08.280
and says, well, why didn't it work

73
00:02:08.280 --> 00:02:08.700
this way?

74
00:02:09.180 --> 00:02:11.000
Well, I didn't test it this way,

75
00:02:11.420 --> 00:02:13.380
meaning it wasn't intended to be used

76
00:02:13.380 --> 00:02:13.900
this way.

77
00:02:14.300 --> 00:02:15.740
The test cases that I wrote were

78
00:02:15.740 --> 00:02:17.620
exhaustive as per the business requirements

79
00:02:17.620 --> 00:02:17.860
that you

80
00:02:17.860 --> 00:02:19.060
gave to me at the time, and

81
00:02:19.060 --> 00:02:22.060
therefore, it is not my fault that

82
00:02:22.060 --> 00:02:22.900
your program doesn't

83
00:02:22.900 --> 00:02:25.600
work to specification because it wasn't

84
00:02:25.600 --> 00:02:26.740
in the specifications.

85
00:02:27.880 --> 00:02:31.260
So yes, testing will slow down the project.

86
00:02:31.460 --> 00:02:33.120
That is by design, that is for

87
00:02:33.120 --> 00:02:35.700
intention, that is so you slow down

88
00:02:35.700 --> 00:02:37.000
to speed up.

89
00:02:37.260 --> 00:02:38.900
If you're in an environment where

90
00:02:38.900 --> 00:02:41.180
it seems like it's fast paced and

91
00:02:41.180 --> 00:02:42.440
it shouldn't be fast

92
00:02:42.440 --> 00:02:46.020
paced, because it's, you know, something

93
00:02:46.020 --> 00:02:47.440
that doesn't involve life and death,

94
00:02:47.820 --> 00:02:48.100
you know,

95
00:02:48.680 --> 00:02:50.540
it's a project or some kind of

96
00:02:50.540 --> 00:02:53.400
code that you're working on that can

97
00:02:53.400 --> 00:02:55.180
take the time to sit back

98
00:02:55.180 --> 00:02:57.460
and strategically think through a

99
00:02:57.460 --> 00:02:58.900
product that is actually going to

100
00:02:58.900 --> 00:02:59.960
survive in the market

101
00:02:59.960 --> 00:03:02.580
and sustain itself for the long term,

102
00:03:02.720 --> 00:03:04.700
or if we're just standing up something

103
00:03:04.700 --> 00:03:05.100
really quick

104
00:03:05.100 --> 00:03:06.060
because somebody thought it'd be a

105
00:03:06.060 --> 00:03:06.460
great idea.

106
00:03:07.280 --> 00:03:09.680
It's good to know when you have

107
00:03:09.680 --> 00:03:11.420
metrics that are built into the application,

108
00:03:11.640 --> 00:03:12.440
when you

109
00:03:12.440 --> 00:03:14.540
actually get feedback that suggests

110
00:03:14.540 --> 00:03:15.860
that this is a good thing and

111
00:03:15.860 --> 00:03:16.900
you're able to bake that

112
00:03:16.900 --> 00:03:19.040
into the solution as you bring all

113
00:03:19.040 --> 00:03:20.540
that data and analytics back.

114
00:03:21.620 --> 00:03:24.120
So yes, testing is going to slow

115
00:03:24.120 --> 00:03:25.420
your project down just a little bit,

116
00:03:25.760 --> 00:03:26.680
not by that much,

117
00:03:27.380 --> 00:03:29.700
because while at first it may seem

118
00:03:29.700 --> 00:03:31.620
like a lot, over the longer term,

119
00:03:31.700 --> 00:03:32.680
it'll start to taper

120
00:03:32.680 --> 00:03:34.600
down and the benefits you'll be reaping

121
00:03:34.600 --> 00:03:35.840
from it will be less and less

122
00:03:35.840 --> 00:03:37.000
because you'll be

123
00:03:37.000 --> 00:03:38.820
more consistent and methodical about

124
00:03:38.820 --> 00:03:40.700
how you're going to implement your solution.

125
00:03:41.600 --> 00:03:43.600
Software does have a taper off limit.

126
00:03:43.780 --> 00:03:44.500
It's not like you're going to be

127
00:03:44.500 --> 00:03:45.600
building on a project forever.

128
00:03:45.720 --> 00:03:47.080
At some point, it gets to a

129
00:03:47.080 --> 00:03:49.020
place where it can be just simply maintained.

130
00:03:49.880 --> 00:03:51.360
And so testing can help you get

131
00:03:51.360 --> 00:03:53.480
there by making sure that you're just

132
00:03:53.480 --> 00:03:54.240
a little more rigid

133
00:03:54.240 --> 00:03:58.660
and disciplined and deliberate in

134
00:03:58.660 --> 00:04:00.560
your software designs rather than

135
00:04:00.560 --> 00:04:01.920
creating hodgepodge trees

136
00:04:01.920 --> 00:04:03.340
that only one person can support.

137
00:04:03.780 --> 00:04:05.540
Makes them more modular so other people

138
00:04:05.540 --> 00:04:07.440
can jump on board and provide support

139
00:04:07.440 --> 00:04:07.920
as well.

